// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	models "github.com/geneva_horodateur/models"

	//models "github.com/Magicking/rc-ge-ch-pdf/models"
)

// ConfigureSAMLOKCode is the HTTP code returned for type ConfigureSAMLOK
const ConfigureSAMLOKCode int = 200

/*ConfigureSAMLOK configure s a m l o k

swagger:response configureSAMLOK
*/
type ConfigureSAMLOK struct {
}

// NewConfigureSAMLOK creates ConfigureSAMLOK with default headers values
func NewConfigureSAMLOK() *ConfigureSAMLOK {

	return &ConfigureSAMLOK{}
}

// WriteResponse to the client
func (o *ConfigureSAMLOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*ConfigureSAMLDefault Internal error

swagger:response configureSAMLDefault
*/
type ConfigureSAMLDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewConfigureSAMLDefault creates ConfigureSAMLDefault with default headers values
func NewConfigureSAMLDefault(code int) *ConfigureSAMLDefault {
	if code <= 0 {
		code = 500
	}

	return &ConfigureSAMLDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the configure s a m l default response
func (o *ConfigureSAMLDefault) WithStatusCode(code int) *ConfigureSAMLDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the configure s a m l default response
func (o *ConfigureSAMLDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the configure s a m l default response
func (o *ConfigureSAMLDefault) WithPayload(payload *models.Error) *ConfigureSAMLDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the configure s a m l default response
func (o *ConfigureSAMLDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConfigureSAMLDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
